$schema: "http://json-schema.org/draft-07/schema"

type: object
properties:
  update_time:
    type: integer
    default: 1000
  temperature_interval:
    type: integer
    default: 300000
  mqtt_base:
    type: string
    default: "s7"
  mqtt_device_name:
    type: string
    default: "plc"
  retain_messages:
    type: boolean
    default: false
  discovery_prefix:
    type: string
    default: "homeassistant"
  discovery_retain:
    type: boolean
    default: false

  plc:
    type: object
    properties:
      port:
        type: integer
      host:
        type: string
      rack:
        type: integer
      slot:
        type: integer
      debug:
        type: boolean
        default: false
    required:
      - port
      - host
      - rack
      - slot

  mqtt:
    type: object
    properties:
      host:
        type: string
      user:
        type: string
      password:
        type: string
      rejectUnauthorized:
        type: boolean
    required:
      - host
      - user
      - password
      - rejectUnauthorized

  devices:
    type: array
    items:
      type: object
      properties:
        type:
          description: "Type of the entity"
          type: string
          enum:
            - binarycover
            - climate
            - heater
            - cover
            - light
            - number
            - sensor
            - switch
      required:
        - type
      allOf:
        # Sensor specific schema
        - if:
            properties:
              type:
                const: sensor
          then:
            additionalProperties: false
            properties:
              type:
                const: sensor
              name: &name
                description: "Name of the entity generated in Home Assistant"
                type: string
              device_name: &device_name
                description: "The name of the device which will be generated in Home Assistant."
                type: string
              mqtt: &mqtt
                description: "The MQTT path fragment for this device. Will be generated using the device_name and name by default."
              device_class: &device_class
                description: "A device class is a measurement categorization in Home Assistant. https://www.home-assistant.io/integrations/homeassistant/#device-class"
                type: string
              value_template: &value_template
                description: "Defines a HA-template to convert the value from the PLC to the value used by Home Assistant. See https://www.home-assistant.io/docs/configuration/templating/#using-templates-with-the-mqtt-integration"
                type: string
              manufacturer: &manufacturer
                description: "The manufacturer gets displayed in the Home Assistant device view."
                type: string
              state: &state
                description: "PLC read/write configuration"
                oneOf:
                  - type: string
                  - type: object
                    additionalProperties: false
                    properties:
                      plc:
                        type: string
                      rw:
                        type: string
                      update_interval:
                        type: number
                      set_plc:
                        type: string
                      write_back:
                        type: boolean
                    required: [ 'plc' ]
              unit_of_measurement: &unit_of_measurement
                type: string
            required:
              - type
              - name
              - state
        # Number specific schema
        - if:
            properties:
              type:
                const: "number"
          then:
            additionalProperties: false
            properties:
              type:
                const: "number"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              state: *state
              command_template: &command_template
                description: "Defines a HA-template to convert the value from the Home Assistant to the value used in the PLC. See https://www.home-assistant.io/docs/configuration/templating/#using-command-templates-with-mqtt"
                type: string
              unit_of_measurement: *unit_of_measurement
              step:
                description: "The step size of the number input generated by Home Assistant."
                type: number
              min:
                description: "The minimum value of the number input generated by Home Assistant."
                type: number
              max:
                description: "The maximum value of the number input generated by Home Assistant."
                type: number
              mode:
                description: "The type of the input widget generated by Home Assistant."
                type: string
                enum:
                  - box
                  - slider
            required:
              - name
              - type
              - state
        # Light specific schema
        - if:
            properties:
              type:
                const: "light"
          then:
            additionalProperties: false
            properties:
              type:
                const: "light"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              state: *state
              command_template: *command_template
              brightness: *state
              brightness_value_template: *value_template
              brightness_command_template: *command_template
            required:
              - type
              - name
              - state
        # Switch specific schema
        - if:
            properties:
              type:
                const: "switch"
          then:
            additionalProperties: false
            properties:
              type:
                const: "switch"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              state: *state
              command_template: *command_template
            required:
              - type
              - name
              - state
        # Cover specific schema
        - if:
            properties:
              type:
                const: "cover"
          then:
            additionalProperties: false
            properties:
              type:
                const: "cover"
              name: *name
              device_name: *device_name
              device_class: *device_class
              mqtt: *mqtt
              manufacturer: *manufacturer
              targetPosition: *state
              currentPosition: *state
              currentTiltAngle: *state
              tiltAngle: *state
              trigger: *state
            required:
              - type
              - name
              - targetPosition
        # BinaryCover specific schema
        - if:
            properties:
              type:
                const: "binarycover"
          then:
            additionalProperties: false
            properties:
              type:
                const: "binarycover"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              targetPosition: *state
              currentPosition: *state
            required:
              - type
              - name
        # Climate specific schema
        - if:
            properties:
              type:
                const: "climate"
          then:
            additionalProperties: false
            properties:
              type:
                const: "climate"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              current_temperature: *state
              current_temperature_template: *value_template
              target_temperature: *state
              temperature_command_template: *command_template
            required:
              - type
              - name
              - current_temperature
              - target_temperature
        # Heater specific schema
        - if:
            properties:
              type:
                const: "heater"
          then:
            additionalProperties: false
            properties:
              type:
                const: "heater"
              name: *name
              device_name: *device_name
              device_class: *device_class
              value_template: *value_template
              mqtt: *mqtt
              manufacturer: *manufacturer
              current_temperature: *state
              current_temperature_template: *value_template
              target_temperature: *state
              temperature_command_template: *command_template
              heatMode_temperature_threshold:
                description: "The temperature threshold on which the heater will be set in heat mode"
                type: number
              min_temp:
                description: "The minimum value of the heater widget in Home Assistant"
                type: number
              max_temp:
                description: "The maximum value of the heater widget in Home Assistant"
                type: number
            required:
              - type
              - name
              - state
              - current_temperature
              - target_temperature

required:
  - plc
  - mqtt
  - devices
